local Rayfield =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/BroWhats/Rayfield/main/privatesource", true))()
local PartnerRank = "üî•Partner"
local DeveloperRank = "‚öíÔ∏èDeveloper"
local ModeratorRank = "üîßModerator"
local LeaderboardRank = "üåç#43"
local Wow =
    "                                                                                                                                                       "
local speed = (game.Players.LocalPlayer.Character.Humanoid.WalkSpeed)
local jump = (game.Players.LocalPlayer.Character.Humanoid.JumpPower)

local Window =
    Rayfield:CreateWindow(
    {
        Name = "Procat Scripts",
        LoadingTitle = "Procat Scripts",
        LoadingSubtitle = "by Procat",
        ConfigurationSaving = {
            Enabled = true,
            FolderName = "Procat Scripts", -- Create a custom folder for your hub/game
            FileName = "Procat Script"
        },
        Discord = {
            Enabled = true,
            Invite = "t8PP55Cxwk", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD.
            RememberJoins = true -- Set this to false to make them join the discord every time they load it up
        },
        KeySystem = true, -- Set this to true to use our key system
        KeySettings = {
            Title = "Procat Scripts",
            Subtitle = "Key System",
            Note = "Join discord for key https://discord.gg/t8PP55Cxwk",
            FileName = "KeyOfHub",
            SaveKey = true,
            GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
            Key = "ProcatScripts"
        }
    }
)

local Tab = Window:CreateTab("Misc Scripts", 4483362458) -- Title, Image

local Button =
    Tab:CreateButton(
    {
        Name = "Anti Lag (optimization)",
        Callback = function()
            local lighting = game.Lighting
            local terrain = game.Workspace.Terrain
            terrain.WaterWaveSize = 0
            terrain.WaterWaveSpeed = 0
            terrain.WaterReflectance = 0
            terrain.WaterTransparency = 0
            lighting.GlobalShadows = false
            lighting.FogStart = 0
            lighting.FogEnd = 0
            lighting.Brightness = 0
            settings().Rendering.QualityLevel = "Level01"

            for i, v in pairs(game:GetDescendants()) do
                if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                    v.Material = "Plastic"
                    v.Reflectance = 0
                elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                    v.Lifetime = NumberRange.new(0)
                elseif v:IsA("Explosion") then
                    v.BlastPressure = 1
                    v.BlastRadius = 1
                elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
                    v.Enabled = false
                elseif v:IsA("MeshPart") then
                    v.Material = "Plastic"
                    v.Reflectance = 0
                end
            end

            for i, e in pairs(lighting:GetChildren()) do
                if
                    e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or
                        e:IsA("BloomEffect") or
                        e:IsA("DepthOfFieldEffect")
                 then
                    e.Enabled = false
                end
            end
        end
    }
)

local Button =
    Tab:CreateButton(
    {
        Name = "Visual Hoverboard",
        Callback = function()
            local sex1 = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get()
            sex1.Hoverboards = {}
            for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Hoverboards:GetChildren()) do
                if v:IsA("Folder") then
                    table.insert(sex1.Hoverboards, v.Name)
                end
            end
            getsenv(game.Players.LocalPlayer.PlayerScripts.Scripts.GUIs.Hoverboards).Update()
            getsenv(game.Players.LocalPlayer.PlayerScripts.Scripts.GUIs.Hoverboards).Equip = function(board)
                sex1.EquippedHoverboard = board
                getsenv(game.Players.LocalPlayer.PlayerScripts.Scripts.GUIs.Hoverboards).Update()
            end
        end
    }
)

local Slider =
    Tab:CreateSlider(
    {
        Name = "Walk Speed",
        Range = {1, 250},
        Increment = 1,
        Suffix = "Walk Speed",
        CurrentValue = speed,
        Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
        end
    }
)

local Slider =
    Tab:CreateSlider(
    {
        Name = "Jump Power",
        Range = {1, 250},
        Increment = 1,
        Suffix = "Jump Power",
        CurrentValue = jump,
        Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
        end
    }
)

local Tab = Window:CreateTab("Fake Tags", 4483362458) -- Title, Image

local Dropdown =
    Tab:CreateDropdown(
    {
        Name = "Rank Picker",
        Options = {"Partner", "Developer", "Moderator", "Leaderboard"},
        CurrentOption = "",
        MultipleOptions = false,
        Flag = "123", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            if Value == "Partner" then
                Rank = PartnerRank
            elseif Value == "Developer" then
                Rank = DeveloperRank
            elseif Value == "Moderator" then
                Rank = ModeratorRank
            elseif Value == "Leaderboard" then
                Rank = LeaderboardRank
            end
        end
    }
)

local Input =
    Tab:CreateInput(
    {
        Name = "Message",
        PlaceholderText = "Text Here",
        RemoveTextAfterFocusLost = true,
        Callback = function(Text)
            Message = Text -- Assign the value of the input field to the variable "Message"
        end
    }
)

local Button =
    Tab:CreateButton(
    {
        Name = "Send Message",
        Callback = function()
            if Rank and Message then -- Check that Rank and Message have been properly assigned values
                game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                    "" .. Wow .. "[" .. Rank .. "] [" .. game.Players.LocalPlayer.DisplayName .. "]: " .. Message,
                    "All"
                )
            end
        end
    }
)

local Slider =
    Tab:CreateSlider(
    {
        Name = "Spam Speed",
        Range = {1, 60},
        Increment = 1,
        Suffix = "Seconds",
        CurrentValue = 10,
        Flag = "SliderSpam", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            SpamTime = Value
        end
    }
)

local Toggle =
    Tab:CreateToggle(
    {
        Name = "Message Spam (toggleable)",
        CurrentValue = false,
        Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(Value)
            task.spawn(
                function()
                    getgenv().toggleLoop = Value
                    while getgenv().toggleLoop and task.wait() do
                        game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                            "" ..
                                Wow ..
                                    "[" ..
                                        Rank .. "] [" .. game.Players.LocalPlayer.DisplayName .. "]: " .. Message .. "",
                            "All"
                        )
                        wait(SpamTime)
                    end
                end
            )
        end
    }
)

local Button =
    Tab:CreateButton(
    {
        Name = "Serverhop (big servers)",
        Callback = function()
            local function serverhop()
                print("Server hop is triggered")
                local response =
                    game.HttpService:JSONDecode(
                    game:HttpGet(
                        "https://games.roblox.com/v1/games/" ..
                            game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=50"
                    )
                )
                if response and response["data"] then
                    for i, v in pairs(response["data"]) do
                        if v["playing"] ~= v["maxPlayers"] then
                            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, v["id"])
                            break
                        end
                    end
                else
                    print("Error: failed to decode JSON response or missing data field.")
                end
            end
            while true do
                wait(0.1)
                serverhop()
            end
        end
    }
)

local Button =
    Tab:CreateButton(
    {
        Name = "Serverhop (small servers)",
        Callback = function()
            local function serverhop1()
                print("Server hop is triggered")
                local response =
                    game.HttpService:JSONDecode(
                    game:HttpGet(
                        "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=50"
                    )
                )
                if response and response["data"] then
                    for i, v in pairs(response["data"]) do
                        if v["playing"] ~= v["maxPlayers"] then
                            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, v["id"])
                            break
                        end
                    end
                else
                    print("Error: failed to decode JSON response or missing data field.")
                end
            end
            while true do
                wait(0.1)
                serverhop1()
            end
        end
    }
)
